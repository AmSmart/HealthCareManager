@page "/dashboard/doctor"
@using HealthCareManager.Client.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using PrescriptionModel = HealthCareManager.Shared.Models.Prescription;
@using MedicalEventModel = HealthCareManager.Shared.Models.MedicalEvent;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;
@inject IServerApi ServerApi;
@attribute [Authorize]
@inject HubConnection HubConnection
@inject JwtAuthStateProvider JwtAuthStateProvider;


<PageTitle>Doctor's Dashboard</PageTitle>

<div class="@(_patientLoaded ? "container" : "app-container")">
    <div class="text-center">
        <MudText Typo="Typo.h5">Welcome to Doctor's Dashboard</MudText>
    </div>

    <div class="text-center mt-3">
        <MudText Typo="Typo.subtitle2">Hi @(_name), Here's what you can do</MudText>
        <MudButton Class="buttons-item" Variant="Variant.Outlined" OnClick="@FindPatient">View Patient</MudButton>
    </div>

    <div class="patient">
        @if (_patientLoaded)
        {
            <MudTextField T="@string" InputType="InputType.Text" ReadOnly FullWidth Label="Full Name" Value="@Patient.FullName" />
            <MudTextField T="@string" InputType="InputType.Text" ReadOnly FullWidth Label="Gender" Value="@Patient.Gender" />
            <MudTextField T="@string" InputType="InputType.Text" ReadOnly FullWidth Label="Other Information" Lines="5" Value="@Patient.OtherInformation" />

            <br />

            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Medical Information</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@AddMedicalInformation" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @for (int i = 0; i < Patient.MedicalInformation.Count; i++)
                    {
                        int localI = i;
                        <MedicalInformation @bind-Data="@Patient.MedicalInformation[localI]" />
                    }
                </MudCardContent>
            </MudCard>

            <br />

            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Medical History</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@AddMedicalEvent" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @for (int i = 0; i < Patient.MedicalHistory.Count; i++)
                    {
                        int localI = i;
                        <MedicalEvent @bind-Data="@Patient.MedicalHistory[localI]" />
                    }
                </MudCardContent>
            </MudCard>

            <br />

            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Prescriptions</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@AddPrescription" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @for (int i = 0; i < Patient.Prescriptions.Count; i++)
                    {
                        int localI = i;
                        <Prescription @bind-Data="@Patient.Prescriptions[localI]" OnMarkPrescription="@(() => Patient.Prescriptions[localI].Collected = true)" />
                    }
                </MudCardContent>
            </MudCard>
            <div class="text-center mt-3 mb-3">
                <LoadingButton Loading="_isSaving" IsSubmitType="false" OnClick="@UpdatePatient" LoadingText="Loading">Save Changes</LoadingButton>
            </div>
        }
    </div>
</div>



@code {
    bool _patientLoaded;
    bool _isSaving;
    string _name = "";

    public Patient Patient { get; set; } = new();

    async Task FindPatient()
    {
        var reference = DialogService.Show<FindPatientDialog>();
        var patient = await reference.GetReturnValueAsync<Patient>();

        if (patient is object)
        {
            Patient = patient;
            _patientLoaded = true;
            return;
        }
        _patientLoaded = false;
    }

    async Task AddPrescription()
    {
        var reference = DialogService.Show<AddPrescription>();
        var prescription = await reference.GetReturnValueAsync<PrescriptionModel>();

        if (prescription is PrescriptionModel)
        {
            prescription.Id = Patient.Prescriptions.Count + 1;
            Patient.Prescriptions.Add(prescription);
        }
    }

    async Task AddMedicalEvent()
    {
        var reference = DialogService.Show<AddMedicalEvent>();
        var medEvent = await reference.GetReturnValueAsync<MedicalEventModel>();

        if (medEvent is MedicalEventModel)
        {
            Patient.MedicalHistory.Add(medEvent);
        }

    }

    async Task AddMedicalInformation()
    {
        var reference = DialogService.Show<AddMedicalInfo>();
        var medInfo = await reference.GetReturnValueAsync<MedicalInfo>();

        if (medInfo is object)
        {
            Patient.MedicalInformation.Add(medInfo);
        }
    }

    async Task UpdatePatient()
    {
        _isSaving = true;
        try
        {
            var response = await ServerApi.UpdatePatientAsync(Patient);
            Snackbar.Add(response.Message, Severity.Success);
        }
        catch
        {
            Snackbar.Add("Error occured while updating", Severity.Error);
        }
        finally
        {
            _isSaving = false;
        }
    }

    protected override void OnInitialized()
    {
        _name = JwtAuthStateProvider.GetUserName();
    }

}