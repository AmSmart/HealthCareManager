@page "/login"
@using HealthCareManager.Client.Authentication
@using Refit
@inject IServerApi ServerApi;
@inject ILocalStorageService LocalStorage;
@inject ISnackbar Snackbar;
@inject NavigationManager Naviagtion;
@inject JwtAuthStateProvider AuthStateProvider;

<PageTitle>Login</PageTitle>

<div class="@(DarkMode ? "container" : "container light-bg")">
    <MudText Typo="Typo.h6">Welcome to HealthCareManager</MudText>
    <br />
    <MudText Typo="Typo.h5">Sign In</MudText>

    <EditForm Model="@Dto" OnValidSubmit="TryLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <MudTextField @bind-Value="@Dto.UserName" InputType="InputType.Text" Label="UserName" Margin="Margin.Dense" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="@Dto.Password" InputType="InputType.Password" Label="Password" Margin="Margin.Dense" Variant="Variant.Outlined" />

        <div class="form-button">
            <LoadingButton IsSubmitType="true" Loading="_isLoading" LoadingText="Loading">Login</LoadingButton>
        </div>
    </EditForm>

</div>

@code {
    bool _isLoading;

    [CascadingParameter(Name = "IsDarkMode")]
    public bool DarkMode { get; set; }

    public LoginDTO Dto = new();

    public async Task TryLogin()
    {
        _isLoading = true;

        try
        {
            var response = await ServerApi.LoginAsync(Dto);
            await AuthStateProvider.SetTokenAsync(response.Data.AccessToken, response.Data.Expiry);
            Naviagtion.NavigateTo(AppRoutes.Index);
        }
        catch (ApiException ex)
        {
            var response = await ex.GetContentAsAsync<AppResponse>();
            Snackbar.Add(response.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
}