@using Refit
@using Microsoft.AspNetCore.SignalR.Client
@using System.IO
@implements IDisposable;
@inject IServerApi ServerApi;
@inject ISnackbar Snackbar;
@inject NavigationManager Navigation;
@inject HubConnection HubConnection;


<EditForm Model="@Dto" OnValidSubmit="@FindPatient">
    <MudDialog Class="custom-modal">
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3 mb-n1" />
                Find Patient?
            </MudText>
        </TitleContent>
        <DialogContent>
            <div class="d-flex flex-column py-1">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <MudTextField Label="RFID" InputType="InputType.Text" @bind-Value="@Dto.RfidTagId"
                              Margin="Margin.Dense" Variant="Variant.Outlined" HelperText="Swipe RFID Tag" />                   
            </div>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@Close">Cancel</MudButton>
            <LoadingButton IsSubmitType="true" Loading="_isLoading" LoadingText="Loading">
                Find
            </LoadingButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    bool _isLoading;

    public FindPatientDTO Dto { get; set; } = new();

    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    void Close() => MudDialog.Close<Patient?>(null);

    public async Task FindPatient()
    {
        _isLoading = true;
        try
        {
            var response = await ServerApi.GetPatientAsync(Dto.RfidTagId);
            Snackbar.Add(response.Message, Severity.Success);
            MudDialog.Close<Patient?>(response.Data);
        }
        catch(ApiException ex)
        {
            var response = await ex.GetContentAsAsync<AppResponse>();
            Snackbar.Add(response?.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    protected override void OnInitialized()
    {
        HubConnection.On<string>("id", async id =>
        {
            Dto.RfidTagId = id;
            await FindPatient();
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        HubConnection.Remove("id");
    }
}