@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection HubConnection; 

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p role="alert">You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code{

    private CancellationTokenSource cts = new CancellationTokenSource();
     
    protected override void OnInitialized()
    {
        #pragma warning disable CS4014
        ConnectWithRetryAsync(cts.Token);
     
        HubConnection.Closed += error =>
        {
            return ConnectWithRetryAsync(cts.Token);
        };
    }
     
    private async Task<bool> ConnectWithRetryAsync(CancellationToken token)
    {
        while (true)
        {
            try
            {
                await HubConnection.StartAsync(token);
                return true;
            }
            catch when (token.IsCancellationRequested)
            {
                return false;
            }
            catch
            {
                await Task.Delay(5000);
            }
        }
    }
     
    public async ValueTask DisposeAsync()
    {
        cts.Cancel();
        cts.Dispose();
        await HubConnection.DisposeAsync();
    }
}